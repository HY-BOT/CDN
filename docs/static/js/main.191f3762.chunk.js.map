{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","cachedToken","window","localStorage","getItem","cachedCDNs","useState","token","setToken","directory","setDirectory","fileName","setFileName","fileContent","setFileContent","JSON","parse","CDNs","setCDNs","style","width","margin","marginBottom","placeholder","type","value","onChange","e","target","setItem","file","files","name","reader","FileReader","readAsDataURL","addEventListener","content","result","split","onClick","ext","newFileName","uuidv1","filePathAndName","axios","url","method","headers","Authorization","data","message","sha","sha1","then","res","console","log","newCDNs","stringify","catch","err","alert","map","cdn","index","key","display","alignItems","marginTop","cursor","fontSize","marginRight","fontWeight","copy","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.191f3762.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport sha1 from 'sha1';\nimport uuidv1 from 'uuid/v1';\nimport copy from 'copy-to-clipboard';\n\nimport './App.css';\n\nfunction App() {\n  const cachedToken = window.localStorage.getItem('token');\n  const cachedCDNs = window.localStorage.getItem('cdns') || '[]';\n  const [token, setToken] = useState(cachedToken || '');\n  const [directory, setDirectory] = useState('default');\n  const [fileName, setFileName] = useState('');\n  const [fileContent, setFileContent] = useState('');\n  const [CDNs, setCDNs] = useState(JSON.parse(cachedCDNs));\n\n  function upload(e) {\n    if (!token) {\n      alert('token is required');\n      return;\n    }\n\n    const filePathAndName = `${directory}/${fileName}`;\n    axios({\n      url: `https://api.github.com/repos/HY-BOT/CDN/contents/${filePathAndName}`,\n      method: 'put',\n      headers: {\n        Authorization: `token ${token}`\n      },\n      data: {\n        message: `Upload: ${filePathAndName}`,\n        content: fileContent,\n        sha: sha1(fileContent)\n      }\n    })\n      .then(res => {\n        console.log('res: ', res);\n        const newCDNs = [\n          ...CDNs,\n          `https://cdn.jsdelivr.net/gh/HY-BOT/CDN@master/${filePathAndName}`\n        ];\n        setCDNs(newCDNs);\n        window.localStorage.setItem('cdns', JSON.stringify(newCDNs));\n      })\n      .catch(err => {\n        console.log('err: ', err);\n        alert('Something went wrong, please check the console log');\n      });\n  }\n\n  return (\n    <div style={{ width: 700, margin: '30px auto' }}>\n      <div style={{ marginBottom: 20 }}>\n        Step1:{' '}\n        <input\n          placeholder=\"type token\"\n          type=\"password\"\n          value={token}\n          onChange={e => {\n            setToken(e.target.value);\n            window.localStorage.setItem('token', e.target.value);\n          }}\n        />\n      </div>\n      <div style={{ marginBottom: 20 }}>\n        Step2:{' '}\n        <input\n          type=\"file\"\n          onChange={e => {\n            const file = e.target.files[0];\n            setFileName(file.name);\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.addEventListener(\n              'load',\n              () => {\n                const content = reader.result;\n                setFileContent(content.split('base64,')[1]);\n              },\n              false\n            );\n          }}\n        />\n      </div>\n      <div style={{ marginBottom: 20 }}>\n        Step3:{' '}\n        <select\n          value={directory}\n          onChange={e => {\n            setDirectory(e.target.value);\n          }}\n        >\n          <option value=\"default\">default</option>\n          <option value=\"common\">common</option>\n        </select>\n      </div>\n      <div style={{ marginBottom: 20 }}>\n        Step4:{' '}\n        <input\n          value={fileName}\n          onChange={e => {\n            setFileName(e.target.value);\n          }}\n          placeholder=\"custom filename and path (optional)\"\n          type=\"text\"\n          style={{ width: '400px' }}\n        />\n        <button\n          onClick={() => {\n            const ext = fileName.split('.')[1];\n            const newFileName = `${uuidv1()}.${ext}`;\n            setFileName(newFileName);\n          }}\n        >\n          generate\n        </button>\n      </div>\n      <div style={{ marginBottom: 20 }}>\n        Step5: <button onClick={upload}>Upload</button>\n      </div>\n      <hr />\n      <strong>Recently upload files:</strong>\n      <ul>\n        {CDNs.map((cdn, index) => {\n          return (\n            <li\n              key={index}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                marginTop: '20px'\n              }}\n            >\n              <span\n                style={{\n                  cursor: 'pointer',\n                  fontSize: 20,\n                  marginRight: 20,\n                  fontWeight: 'bold',\n                  width: 100\n                }}\n                onClick={() => {\n                  copy(cdn);\n                }}\n              >\n                copy ->\n              </span>\n              <a href={cdn} target=\"_blank\">\n                {cdn}\n              </a>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}